#ifndef __LAB06_CONTROLLER_NXC__
#define __LAB06_CONTROLLER_NXC__

//#include "ControllerConfigurations.nxc"

//#include "Utilities.nxc"
//#include "DrivingAPI.nxc"
//#inlcude "ClawAPI.nxc"
//#include "SonarSensing.nxc"
//#include "ColorSensing.nxc"
//#include "LightSensing.nxc"
#include "CompassSensing.nxc"


#define ORIENTATION_TOLERANCE 5 // degrees(ish))
#define WALL_PROXIMITY 10       // cm(ish)

/**
 * An enumeration of control strategy values.
 */
enum Strategies {
  PROCEED,
  U_TURN,
  FIND_ENDZONE,
  ALIGN_SELF,
  CREEP_UP_TO_BALL,
  DUMP_RED_BALL,
  DUMP_BLUE_BALL
};


/**
 * Spawns the thread responsible for initializing the robot.
 */
task main();

/**
 * 
 */
task TASK_controller();


void goToBallAreaStartCorner();
void driveUpToWall();
void alignForBallPickup();
void findBall();
int captureBall();
void dumpBallInBallArea();
void dumpBallInFarArea();


task main() {
  Precedes(
    TASK_CompassSensing,
    TASK_controller
  );

  // configure sensors
//  initializeMUX(MUX_PORT);

//  initializeClaw();
}


task TASK_controller() {
  bool testStuff = true;
  while (testStuff) {

  }

  int strategy;

  while (true) { // no stopping condition for contest given
    goToBallAreaStartCorner();
    alignForBallPickup();
    findBall();
    strategy = captureBall();

    if (strategy == DUMP_RED_BALL) {
      dumpBallInBallArea();
    } else if (strategy == DUMP_BLUE_BALL) {
      dumpBallInFarArea();
    }
      // TODO: otherwise go to middle? break?
  }

  StopAllTasks();
}

void goToBallAreaStartCorner() {
  bool aboveThreshold = false;
  bool belowThreshold = false;

  while (!(aboveThreshold && belowThreshold)) {
    startStationarySpin(RIGHT);
    aboveThreshold =
      (COMPETITION_NORTH - ORIENTATION_TOLERANCE) <= gCompassReading.value;
    belowThreshold =
      gCompassReading.value <= (COMPETITION_NORTH + ORIENTATION_TOLERANCE);
  }

  driveUpToWall();
  stationaryTurn(RIGHT, TURN_90);

  driveUpToWall();
  stationaryTurn(RIGHT, TURN_90);
}


void driveUpToWall() {
  startDrivingStraight(FORWARD, CRUISE_SPEED);
  until(
    gSonarReading.rightValue <= WALL_PROXIMITY ||
    gSonarReading.leftValue <= WALL_PROXIMITY
  );
  stopWheels();
}

void alignForBallPickup() {}
void findBall() {}
int captureBall() {return 0;}
void dumpBallInBallArea() {}
void dumpBallInFarArea() {}


#endif //__LAB06_CONTROLLER_NXC__
