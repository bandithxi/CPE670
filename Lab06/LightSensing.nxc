#ifndef __LIGHTSENSING_NXC__
#define __LIGHTSENSING_NXC__

#define REFLECTANCE_DEBUG 0
#define REFLECTANCE_MUXED 0

#if REFLECTANCE_MUXED
    #define RIGHT_LIGHT 2  // msensorS1_3
    #define LEFT_LIGHT 2  // msensorS1_3
#else
    #define RIGHT_LIGHT IN_3
    #define LEFT_LIGHT IN_3
#endif

typedef struct {
  int rightValue;
  int leftValue;
  mutex ownership;
  bool readingIsValid;
} LightReading;


bool gUseLightSensing = true;
LightReading gLightReading;


task TASK_LightSensing();
int readReflectanceSensor(byte pPort);
void debugOutputLight(const int pRightLightVal, const int pLeftLightVal);


task TASK_LightSensing() {
  SetSensorLight(RIGHT_LIGHT);
  SetSensorLight(LEFT_LIGHT);

  gLightReading.readingIsValid = false;

  while (gUseLightSensing) {
    gLightReading.rightValue = readReflectanceSensor(RIGHT_LIGHT);
    gLightReading.rightValue = readReflectanceSensor(LEFT_LIGHT);
    Wait(MS_20);
    gLightReading.readingIsValid = true;

#if REFLECTANCE_DEBUG
    debugOutputLight(gLightReading.rightValue, gLightReading.leftValue);
#endif // REFLECTANCE_DEBUG
  }

  gLightReading.readingIsValid = false;
}

int readReflectanceSensor(byte pPort) {
    int reading = -666;
    
    #if REFLECTANCE_MUXED
        reading = smuxSensorLegoLightNorm(pPort);
    #else
         reading = Sensor(pPort);
         Wait(MS_20);
    #endif
    
    return reading;
}

void debugOutputLight(const int pRightLightVal, const int pLeftLightVal) {
  ClearScreen();
  TextOut(2, LCD_LINE1, "Light Reading:");
  NumOut(4, LCD_LINE2, pRightLightVal);
  NumOut(4, LCD_LINE3, pLeftLightVal);
  Wait(MS_100);
}


#endif //__LIGHTSENSING_NXC__
