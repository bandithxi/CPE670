#ifndef __SONARSENSING_NXC__
#define __SONARSENSING_NXC__

#define SONAR_DEBUG 0
#define SONAR_MUXED 0

#define RIGHT_SONAR IN_2
#define LEFT_SONAR IN_1

#define SONAR_CLEAR 255


typedef struct {
  byte rightValue;
  byte leftValue;
  mutex ownership;
  bool readingIsValid;
} SonarReading;


bool gUseSonarSensing = true;
SonarReading gSonarReading;

task TASK_sonarSensor();
byte readSonarSensor(byte pSensorPort);
void debugOutputSonar(byte pSonarOneReading, byte pSonarTwoReading);

/**
 * Spawns a thread to publish sonar readings.
 */
task TASK_sonarSensor() {
  SetSensorUltrasonic(RIGHT_SONAR);
  SetSensorUltrasonic(LEFT_SONAR);

  // start with sensors de-activated for good measure (0x00 - off, 0x03 - on)
  I2CWrite(RIGHT_SONAR, 0x41, 0x00);
  I2CWrite(LEFT_SONAR, 0x41, 0x00);

while (true) {
  until(gUseSonarSensing);
  while (gUseSonarSensing) {
#if SONAR_MUXED

#else
    gSonarReading.rightValue = readSonarSensor(RIGHT_SONAR);
    gSonarReading.leftValue = readSonarSensor(LEFT_SONAR);
#endif //SONAR_MUXED
  }
  
  I2CWrite(RIGHT_SONAR, 0x41, 0x00);
  I2CWrite(LEFT_SONAR, 0x41, 0x00);

#if SONAR_DEBUG
  debugOutputSonar();
#endif //SONAR_DEBUG

  }
}


byte readSonarSensor(byte pSensorPort) {
  #if SONAR_MUXED

  #else
    gSonarReading.rightValue = readSonarSensor(RIGHT_SONAR);
    gSonarReading.leftValue = readSonarSensor(LEFT_SONAR);

    I2CWrite(pSensorPort, 0x41, 0x00);
    I2CWrite(pSensorPort, 0x41, 0x03);

    byte reading = SensorUS(pSensorPort);
    Wait(MS_20 + MS_5);
  
    I2CWrite(pSensorPort, 0x41, 0x00);
  #endif //SONAR_MUXED

  return reading;
}


void debugOutputSonar(byte pSonarOneReading, byte pSonarTwoReading) {
  ClearScreen();
    if (pSonarOneReading <= NEAR_THRESHOLD) {
      TextOut(2, LCD_LINE2, "OBSTACLE ON RIGHT!");
    } else {
      NumOut(2, LCD_LINE2, pSonarOneReading);
    }
    if (pSonarTwoReading <= NEAR_THRESHOLD) {
      TextOut(2, LCD_LINE4, "OBSTACLE ON LEFT!");
    } else {
      NumOut(2, LCD_LINE4, pSonarTwoReading);
    }
    Wait(MS_100);
}

#endif //__SONARSENSING_NXC__
