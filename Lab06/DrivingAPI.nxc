#ifndef __DRIVINGAPI_NXC__
#define __DRIVINGAPI_NXC__


#define RIGHT_WHEEL OUT_C
#define LEFT_WHEEL OUT_A
#define BOTH_WHEELS OUT_AC

#define FORWARD true
#define REVERSE false
#define RIGHT true
#define LEFT false

#define MIN_TURN_TIME (MS_100 + MS_20)
#define TURN_15 15
#define TURN_30 30
#define TURN_45 45
#define TURN_90 90
#define TURN_180 180
#define MIN_TURN 15

#define SPEED_INCREMENT 4
#define TIME_PER_UNIT (MS_150 + MS_20) // time to move 1/4 of a "car length"
                                       // at FULL_SPEED

enum DrivingSpeed {
  CRAWL_SPEED = 20,
  SLOW_SPEED = 45,
  CRUISE_SPEED = 85,
  FAST_SPEED = 95
};


void stopWheels();

void startDrivingStraight(bool pDirection, int pSpeed);
void moveSetDistance(bool pDirection, int pUnitsToMove);

void startStationarySpin(bool pDirection);
void hardTurn(bool pDirection, int pTurnMagnitude);
void stationaryTurn(bool pDirection, int pTurnMagnitude);
void setSway(bool pSide);

void testMovementLib();


void stopWheels() {
 	Float(BOTH_WHEELS);
 	Wait(MS_20);
 	Off(BOTH_WHEELS);
}


void startDrivingStraight(bool pDirection, int pSpeed) {
  if (pDirection == FORWARD) {
    OnFwdReg(BOTH_WHEELS, pSpeed, OUT_REGMODE_SYNC);
  } else {
    OnRevReg(BOTH_WHEELS, pSpeed, OUT_REGMODE_SYNC);
  }
}


void moveSetDistance(bool pDirection, int pUnitsToMove) {
	startDrivingStraight(pDirection, FAST_SPEED);
	Wait(pUnitsToMove * TIME_PER_UNIT);
	stopWheels();
}


void startStationarySpin(bool pDirection) {
  if (pDirection == RIGHT) {
    OnRev(RIGHT_WHEEL, CRAWL_SPEED);
    OnFwd(LEFT_WHEEL, CRAWL_SPEED);
  } else {
    OnFwd(RIGHT_WHEEL, CRAWL_SPEED);  
    OnRev(LEFT_WHEEL, CRAWL_SPEED);
  }
}


void hardTurn(bool pDirection, int pTurnMagnitude) {
  byte dragWheel;
  byte drivingWheel;

  if (pDirection == RIGHT) {
    dragWheel = RIGHT_WHEEL;
    drivingWheel = LEFT_WHEEL;
  } else {
    dragWheel = LEFT_WHEEL;
    drivingWheel = RIGHT_WHEEL;
  }

  float factor = pTurnMagnitude / MIN_TURN;

  OnFwd(drivingWheel, CRAWL_SPEED);
  OnRev(dragWheel, CRAWL_SPEED);

  Wait((factor * MIN_TURN_TIME) - factor);
}


void stationaryTurn(bool pDirection, int pTurnMagnitude) {
  stopWheels();

  hardTurn(pDirection, pTurnMagnitude);

  stopWheels();
}


void setSway(bool pSide) {
	byte dragWheel;
	byte drivingWheel;

	if (pSide == RIGHT) {
		dragWheel = RIGHT_WHEEL;
		drivingWheel = LEFT_WHEEL;
	} else {
		dragWheel = LEFT_WHEEL;
		drivingWheel = RIGHT_WHEEL;
	}

	OnFwd(drivingWheel, FULL_SPEED);
	for (int i = 0; i < 5; i++) {
		Off(dragWheel);
		Wait(MS_10);
		OnFwd(dragWheel, FULL_SPEED / 2);
	}

  OnFwd(dragWheel, FULL_SPEED * 0.8);
}


void testMovementLib() {
  for (int i = 0; i < 4; i++) {
    moveSetDistance(FORWARD, 1);
  }
  Wait(MS_500);
  for (int i = 0; i < 2; i++) {
    moveSetDistance(REVERSE, 2);
  }
  Wait(MS_500);

  for (int i = 0; i < 3; i++) {
    stationaryTurn(LEFT, TURN_15);
  }
  Wait(MS_500);
  stationaryTurn(RIGHT, TURN_45);
  Wait(MS_500);
  stationaryTurn(RIGHT, TURN_90);
  Wait(MS_500);
  stationaryTurn(RIGHT, TURN_45);
  Wait(MS_500);
  stationaryTurn(LEFT, TURN_180);

  Wait(MS_500);
  startDrivingStraight(FORWARD);
  Wait(SEC_1);
  setSway(RIGHT);
  Wait(SEC_2);
  stopWheels();
}

#endif //__DRIVINGAPI_NXC__
